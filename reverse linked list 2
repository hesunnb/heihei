/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param ListNode head is the head of the linked list 
     * @oaram m and n
     * @return: The head of the reversed ListNode
     */
    public ListNode reverseBetween(ListNode head, int m , int n) {
        // write your code
        if(head == null || head.next == null)
        {
            return head;
        }
        
        ListNode dummytemp = new ListNode(0); //作为翻转字符串的虚拟节点
        ListNode dummyhead = new ListNode(0); //因为head也会遭到翻转，所以引入这个节点把head提前
        
        dummyhead.next = head;
        head = dummyhead; //head到了dummyhead的位置
        
        ListNode start = head;
        
        for(int i = 0; i < m - 1; i++)
        {
            start = start.next; //让start窜到需要翻转的字符串的前一个位置
        }
        
        ListNode flagstart = start.next; //flagstart是所要翻转的字符串的第一个位置
        ListNode end = start;
        
        for(int i = 0; i < n - m + 1; i++)
        {
            end = end.next; //在start的基础上继续向后找end,不用从头找，降低复杂度，让其扫一遍就能完成；end是索要翻转字符串的最后一个字母
        }
       
        ListNode flagend = end.next; //flagend是索要翻转字符串最后一个字母的下一位，就算翻转的是尾部，那么flagend也就是null,不会访问不到
        ListNode p = start.next; //p和q都在flagstart的位置上，准备进行翻转
        ListNode q = start.next;
       
        while(q != flagend) //与reverse linked list 1的方法一样，进行翻转
        {
            q = q.next;
            p.next = dummytemp.next;
            dummytemp.next = p;
            p = q;
        }
        
        start.next = end; //把翻转好的字符串连回原来的字符串
        flagstart.next = flagend;
        return dummyhead.next; //返回第一个位置
    }
}

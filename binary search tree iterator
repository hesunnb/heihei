/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 * Example of iterate a tree:
 * BSTIterator iterator = new BSTIterator(root);
 * while (iterator.hasNext()) {
 *    TreeNode node = iterator.next();
 *    do something for node
 * } 
 */
public class BSTIterator {
    
    //等价于写非递归的中序遍历
    //空间复杂度是O(h),时间复杂度都是O(1)
    
    //@param root: The root of binary tree.
    private TreeNode curt = null;
    private Stack<TreeNode> st = new Stack<TreeNode>();
    public BSTIterator(TreeNode root) { //这是构造函数
        // write your code here
        curt = root;
    }

    //@return: True if there has next node, or false
    public boolean hasNext() {
        // write your code here
        return(curt != null || !st.isEmpty());
    }
    
    //@return: return next node
    public TreeNode next() {
        // write your code here
        while(curt != null)
        {
            st.push(curt); //从根开始一连串把根左都加入栈
            curt = curt.left;
        }
        curt = st.pop(); //一个一个取出来，取出一个同时看这个点的右侧节点，返回上面接着取
        TreeNode tn = curt;
        curt = curt.right;
        return tn;
    }
}

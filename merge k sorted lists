/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    public ListNode mergeKLists(List<ListNode> lists) {  
        // write your code here
        //List里面装的都是每个链表的头结点
 
//方法１：Heap的方法:(用comparator),思路就是把每个链表的头结点装入优先级队列然后根据比较器自动挑出最小的，取出来，然后从取出点的那个链表再加入一个结点继续比较
        //复杂度：nklog(k),k是lists的长度，n是每个链表的长度，comparator是用二分法来找位置然后加入值的，所以每加入一个值就是一个log(k),总共加入nk次
        if(lists == null || lists.size() == 0) //leetcode中是(ListNode[] lists),就把list.size()全部换成lists.length就行啦
        {
            return null;
        }
        Queue<ListNode> heap = new PriorityQueue<ListNode>(lists.size(), ListNodeComparator);
        for(int i = 0; i < lists.size(); i++) //加入所有链表的头结点
        {
            if(lists.get(i) != null)
            {
                heap.add(lists.get(i));
            }
        }
        
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while(!heap.isEmpty())
        {
            ListNode head = heap.poll();
            tail.next = head;
            tail = head;
            if(head.next != null)
            {
                heap.add(head.next); //每次再加入一个点继续比较
            }
        }
        return dummy.next;
    }
    
    private Comparator<ListNode> ListNodeComparator = new Comparator<ListNode>() //匿名类的写法
    {
        public int compare(ListNode left, ListNode right) //重写compare函数
        {
            return left.val - right.val; //comparator中左边减右边是从小到大排，右边减左边是从大到小排
        }
    }; //有个分号
    
    
     //ListNode是自己写的类，要是比较类的话就得用comparator,指定比较类中的什么数值，进而按照这个数值进行排序，如果不用comparator就会出现ClassCastException这个异常，叫类型转换错误，因为ListNode无法直接强转成comparator
     
    //Comparator本身就是一个类，要实现它的一个匿名类，目的是重写compare方法
    //匿名类是不能有名称的类，所以没办法引用它们。必须在创建时，作为new语句的一部分来声明它们。 这就要采用另一种形式的new语句，如下所示： new <类或接口> <类的主体> 这种形式的new语句声明一个新的匿名类，它对一个给定的类进行扩展，或者实现一个给定的接口。它还创建那个类的一个新实例，并把它作为语句的结果而返回。要扩展的类和要实现的接口是new语句的操作数，后跟匿名类的主体
    
//方法２：merge two by two,取两个排好，再和第三个排，以此类推，复杂度是nk2; (1+...+k)n + kn -> nk2

}

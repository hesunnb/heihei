/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
     
    //思路:也是运用找二叉树最大深度的思想，只不过每次求绝对值比较一下即可
    public boolean isBalanced(TreeNode root) {
        // write your code here
        
        if(root == null)
        {
            return true;
        }
        
        ishelper(root);
        return flag; //返回结果即可
    }
    
    boolean flag = true;
    public int ishelper(TreeNode root)
    {
        if(root == null)
        {
            return 0;
        }
        int left = ishelper(root.left); //左子树深度
        int right = ishelper(root.right); //右子树深度
        int result = Math.abs(left - right);
        if(result >= 2)
        {
            flag = false; //条件不满足，马上就为假
        }
        return Math.max(left, right)+1;
    }
    
    
    //九章答案，跟自己不一样的地方就是没用全局变量，直接用－１来判断的
    public boolean isBalanced(TreeNode root) {
        return maxDepth(root) != -1;
    }

    private int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int left = maxDepth(root.left); //左子树深度
        int right = maxDepth(root.right); //右子树深度
        if (left == -1 || right == -1 || Math.abs(left-right) > 1) {
            return -1;
        }
        return Math.max(left, right) + 1;
    }
}
